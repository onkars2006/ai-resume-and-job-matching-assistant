import os
import json
import tempfile
import re
from flask import Flask, render_template, request, send_file, flash, redirect
from werkzeug.utils import secure_filename
from PyPDF2 import PdfReader
import google.generativeai as genai
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = '/tmp'
app.config['MAX_CONTENT_LENGTH'] = 5 * 1024 * 1024
app.secret_key = os.urandom(24)

# Configure Gemini
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
model = genai.GenerativeModel('gemini-1.5-flash')

JOB_ROLES = ['Software Developer', 'Marketing Specialist', 'HR Manager', 'Data Analyst', 'Graphic Designer']
ALLOWED_EXTENSIONS = {'pdf', 'txt', 'docx'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def extract_text_from_pdf(file_path):
    reader = PdfReader(file_path)
    return '\n'.join([page.extract_text() for page in reader.pages if page.extract_text()])

def extract_text_from_docx(file_path):
    doc = Document(file_path)
    return '\n'.join([para.text for para in doc.paragraphs if para.text.strip()])

def analyze_resume(text, job_role):
    prompt = f"""Analyze this resume for a {job_role} position and provide STRICT JSON output with:
    {{
        "skills": ["technical", "skills"],
        "job_roles": ["suggested", "roles"],
        "skill_gaps": ["missing", "skills"],
        "improvements": ["resume", "improvements"],
        "resume_score": 85,
        "line_improvements": {{
            "Original line 1": "Improved line 1",
            "Original line 2": "Improved line 2"
        }},
        "job_readiness": {{
            "length_score": 90,
            "structure_score": 80,
            "keyword_score": 75
        }}
    }}
    Include specific metrics and action verbs in line improvements.
    Calculate resume_score (0-100) based on:
    - Length (20%): 1-2 pages
    - Structure (30%): Standard sections
    - Keywords (50%): Role-specific terms
    
    Resume Content:
    {text}
    """
    
    response = model.generate_content(prompt)
    response_text = response.text.replace('```json', '').replace('```', '').strip()
    return json.loads(response_text)

def improve_resume_content(original_text, improvements):
    improved_text = original_text
    for original, improved in improvements.items():
        improved_text = improved_text.replace(original, improved)
    return improved_text

def create_improved_resume(original_text, analysis):
    doc = Document()
    
    # Header
    header = doc.sections[0].header
    header_para = header.paragraphs[0]
    header_para.text = "Improved Resume - Generated by AI Assistant"
    header_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Main content
    doc.add_heading('Professional Profile', level=1)
    doc.add_paragraph(improve_resume_content(original_text, analysis['line_improvements']))
    
    # Add analysis section
    doc.add_heading('AI Analysis Summary', level=1)
    doc.add_paragraph(f"Resume Score: {analysis['resume_score']}/100")
    doc.add_paragraph(f"Suggested Roles: {', '.join(analysis['job_roles'])}")
    
    # Add improvements
    doc.add_heading('Key Improvements', level=2)
    for imp in analysis['improvements']:
        doc.add_paragraph(f"âœ“ {imp}", style='ListBullet')
        
    # Style
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Calibri'
    font.size = Pt(11)
    
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
    doc.save(temp_file.name)
    return temp_file.name

def calculate_job_readiness(analysis):
    weights = {'length_score': 0.2, 'structure_score': 0.3, 'keyword_score': 0.5}
    return sum(analysis['job_readiness'][k]*weights[k] for k in weights)

@app.route('/', methods=['GET', 'POST'])
def home():
    return render_template('index.html', job_roles=JOB_ROLES)

@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        job_role = request.form.get('job_role', 'General')
        text = ''
        
        if 'resume' in request.files:
            file = request.files['resume']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                
                if filename.endswith('.pdf'):
                    text = extract_text_from_pdf(file_path)
                elif filename.endswith('.docx'):
                    text = extract_text_from_docx(file_path)
                else:
                    text = file.read().decode('utf-8')
        else:
            text = request.form.get('resume_text', '')
        
        analysis = analyze_resume(text, job_role)
        analysis['job_readiness_score'] = calculate_job_readiness(analysis)
        docx_path = create_improved_resume(text, analysis)
        
        return render_template('results.html', 
                            job_role=job_role,
                            skills=analysis['skills'],
                            roles=analysis['job_roles'],
                            gaps=analysis['skill_gaps'],
                            improvements=analysis['improvements'],
                            line_improvements=analysis['line_improvements'],
                            resume_score=analysis['resume_score'],
                            job_readiness=analysis['job_readiness'],
                            docx_path=docx_path)
    
    except Exception as e:
        flash(f"Error: {str(e)}", 'danger')
        return redirect('/')

@app.route('/download')
def download():
    try:
        docx_path = request.args.get('path')
        return send_file(docx_path, as_attachment=True, download_name='improved_resume.docx')
    except Exception as e:
        flash(f"Download error: {str(e)}", 'danger')
        return redirect('/')

if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    app.run(debug=True)
